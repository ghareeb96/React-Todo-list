{"version":3,"sources":["Components/Todo.js","Components/Todo-list.js","App.js","serviceWorker.js","index.js"],"names":["Todo","completeBtnHandler","props","completeBtn","id","deleteBtnHandler","deleteBtn","className","this","completed","task","onClick","bind","Component","Todolist","handleInput","e","setState","inputText","target","value","addTodo","state","prev","todos","Math","random","completeHandler","map","item","console","log","deleteHandler","filter","filterTodo","document","getElementById","filteredTodos","prevProps","prevState","type","onChange","placeholder","name","newTodo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f48aad2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./Todo.css\"\r\n\r\nexport class Todo extends Component {\r\n\r\n    // state = {\r\n    //     todo: {\r\n    //         task: this.props.task,\r\n    //         id: this.props.id,\r\n    //         completed: this.props.completed\r\n    //     }\r\n    // }\r\n    completeBtnHandler = () => {\r\n        this.props.completeBtn(this.props.id)\r\n    }\r\n    deleteBtnHandler = () => {\r\n        this.props.deleteBtn(this.props.id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.completed ? \"todo completed\" : \"todo incompleted\"}>\r\n                <div className=\"task-description\">\r\n                    <h2>{this.props.task}</h2>\r\n                </div>\r\n                <div className=\"task-btns\">\r\n                    <button\r\n                        className=\"completed\"\r\n                        onClick={this.completeBtnHandler.bind(this)}>\r\n                        <i className=\"far fa-check-square\"></i>\r\n                    </button>\r\n                    <button\r\n                        className=\"delete\"\r\n                        onClick={this.deleteBtnHandler.bind(this)}>\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo\r\n","import React, { Component } from 'react'\r\nimport \"./Todo-list.css\"\r\nimport Todo from \"./Todo\"\r\n\r\nexport class Todolist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputText: \"\",\r\n            todos: [],\r\n            filteredTodos: []\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    handleInput = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    addTodo = () => {\r\n        if (this.state.inputText) {\r\n            this.setState((prev) => ({\r\n                todos: [...prev.todos,\r\n                {\r\n                    task: this.state.inputText,\r\n                    completed: false,\r\n                    id: Math.random() * 100\r\n                }],\r\n                inputText: \"\"\r\n            }))\r\n\r\n        }\r\n    }\r\n\r\n    completeHandler = (id) => {\r\n        this.setState({\r\n            todos:\r\n                this.state.todos.map((item) => {\r\n                    if (item.id === id) {\r\n                        // console.log(item)\r\n                        return {\r\n                            ...item, completed: !item.completed\r\n                        }\r\n                    }\r\n                    console.log(item)\r\n                    return item\r\n                })\r\n        })\r\n\r\n    }\r\n    deleteHandler = (id) => {\r\n        this.setState({\r\n            todos:\r\n                this.state.todos.filter((item) => item.id !== id)\r\n        })\r\n    }\r\n\r\n    filterTodo = () => {\r\n        switch (document.getElementById(\"filter\").value) {\r\n            case (\"completed\"): {\r\n                this.setState({\r\n                    filteredTodos: this.state.todos.filter(item => item.completed === true)\r\n                })\r\n                break;\r\n            }\r\n            case (\"incompleted\"): {\r\n                this.setState({\r\n                    filteredTodos: this.state.todos.filter(item => item.completed === false)\r\n                })\r\n                break;\r\n            }\r\n            default: {\r\n                this.setState({\r\n                    filteredTodos: this.state.todos\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.todos !== this.state.todos) {\r\n            this.filterTodo()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-list\">\r\n                < div className=\"todo-list-header\" >\r\n\r\n                    <div className=\"input-bar\">\r\n                        <input\r\n                            value={this.state.inputText}\r\n                            type=\"text\"\r\n                            onChange={this.handleInput}\r\n                            id=\"todo-input\"\r\n                            placeholder=\"Enter a Todo\" />\r\n\r\n                        <button\r\n                            className=\"add-btn\"\r\n                            onClick={this.addTodo}>\r\n                            <i className=\"far fa-plus-square\"></i>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"filter-bar\">\r\n                        <select name=\"filter\" id=\"filter\" onChange={this.filterTodo}>\r\n                            <option value=\"all\">All</option>\r\n                            <option value=\"completed\">Completed</option>\r\n                            <option value=\"incompleted\">Incompleted</option>\r\n                        </select>\r\n                    </div>\r\n                </div >\r\n\r\n                <div className=\"todos\">\r\n                    {this.state.filteredTodos.map((newTodo) => (\r\n                        <Todo\r\n                            task={newTodo.task}\r\n                            key={newTodo.id}\r\n                            id={newTodo.id}\r\n                            completed={newTodo.completed}\r\n                            completeBtn={this.completeHandler.bind(this)}\r\n                            deleteBtn={this.deleteHandler.bind(this)}\r\n                        />\r\n                    ))}\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todolist\r\n\r\n\r\n","import React, { Component } from 'react'\nimport TodoList from \"./Components/Todo-list\"\nimport './App.css'\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Your Todo-List</h1>\n        </div>\n        <TodoList />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}